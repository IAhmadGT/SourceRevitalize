// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_2013_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );

// Constants
const float2 _g_TexelSize		: register( c16 );

// Arrays
static const float g_cArray_27[13][13] =
{
	float( 0.000013f ),float( 0.000043f ),float( 0.000117f ),float( 0.000252f ),float( 0.000436f ),float( 0.000607f ),float( 0.000677f ),float( 0.000607f ),float( 0.000436f ),float( 0.000252f ),float( 0.000117f ),float( 0.000043f ),float( 0.000013f ),
	float( 0.000043f ),float( 0.000145f ),float( 0.000391f ),float( 0.000843f ),float( 0.001461f ),float( 0.002031f ),float( 0.002267f ),float( 0.002031f ),float( 0.001461f ),float( 0.000843f ),float( 0.000391f ),float( 0.000145f ),float( 0.000043f ),
	float( 0.000117f ),float( 0.000391f ),float( 0.001051f ),float( 0.002267f ),float( 0.003927f ),float( 0.005460f ),float( 0.006094f ),float( 0.005460f ),float( 0.003927f ),float( 0.002267f ),float( 0.001051f ),float( 0.000391f ),float( 0.000117f ),
	float( 0.000252f ),float( 0.000843f ),float( 0.002267f ),float( 0.004892f ),float( 0.008473f ),float( 0.011780f ),float( 0.013148f ),float( 0.011780f ),float( 0.008473f ),float( 0.004892f ),float( 0.002267f ),float( 0.000843f ),float( 0.000252f ),
	float( 0.000436f ),float( 0.001461f ),float( 0.003927f ),float( 0.008473f ),float( 0.014675f ),float( 0.020404f ),float( 0.022774f ),float( 0.020404f ),float( 0.014675f ),float( 0.008473f ),float( 0.003927f ),float( 0.001461f ),float( 0.000436f ),
	float( 0.000607f ),float( 0.002031f ),float( 0.005460f ),float( 0.011780f ),float( 0.020404f ),float( 0.028370f ),float( 0.031664f ),float( 0.028370f ),float( 0.020404f ),float( 0.011780f ),float( 0.005460f ),float( 0.002031f ),float( 0.000607f ),
	float( 0.000677f ),float( 0.002267f ),float( 0.006094f ),float( 0.013148f ),float( 0.022774f ),float( 0.031664f ),float( 0.035341f ),float( 0.031664f ),float( 0.022774f ),float( 0.013148f ),float( 0.006094f ),float( 0.002267f ),float( 0.000677f ),
	float( 0.000607f ),float( 0.002031f ),float( 0.005460f ),float( 0.011780f ),float( 0.020404f ),float( 0.028370f ),float( 0.031664f ),float( 0.028370f ),float( 0.020404f ),float( 0.011780f ),float( 0.005460f ),float( 0.002031f ),float( 0.000607f ),
	float( 0.000436f ),float( 0.001461f ),float( 0.003927f ),float( 0.008473f ),float( 0.014675f ),float( 0.020404f ),float( 0.022774f ),float( 0.020404f ),float( 0.014675f ),float( 0.008473f ),float( 0.003927f ),float( 0.001461f ),float( 0.000436f ),
	float( 0.000252f ),float( 0.000843f ),float( 0.002267f ),float( 0.004892f ),float( 0.008473f ),float( 0.011780f ),float( 0.013148f ),float( 0.011780f ),float( 0.008473f ),float( 0.004892f ),float( 0.002267f ),float( 0.000843f ),float( 0.000252f ),
	float( 0.000117f ),float( 0.000391f ),float( 0.001051f ),float( 0.002267f ),float( 0.003927f ),float( 0.005460f ),float( 0.006094f ),float( 0.005460f ),float( 0.003927f ),float( 0.002267f ),float( 0.001051f ),float( 0.000391f ),float( 0.000117f ),
	float( 0.000043f ),float( 0.000145f ),float( 0.000391f ),float( 0.000843f ),float( 0.001461f ),float( 0.002031f ),float( 0.002267f ),float( 0.002031f ),float( 0.001461f ),float( 0.000843f ),float( 0.000391f ),float( 0.000145f ),float( 0.000043f ),
	float( 0.000013f ),float( 0.000043f ),float( 0.000117f ),float( 0.000252f ),float( 0.000436f ),float( 0.000607f ),float( 0.000677f ),float( 0.000607f ),float( 0.000436f ),float( 0.000252f ),float( 0.000117f ),float( 0.000043f ),float( 0.000013f ),
};

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float4 _var0 = float4( 0.000000, 0.000000, 0.000000, 0.000000 );
	float2 _var1 = _g_TexelSize * float( 1.500000 );
	float2 _var2 = In.vTexCoord_0 - float( 0.500000 );
	float _var3 = length( _var2 );
	_var3 = smoothstep( float( 0.000000 ), float( 0.600000 ), _var3 );
	_var1 = _var1 * _var3;
	float2 _var4 = _var1 * float( -7.000000 );
	float2 _var5 = float2( 0.000000, _var1.y );
	float2 _var6 = float2( _var1.x, 0.000000 );
	for ( int _var7 = 0; _var7 < 13; _var7++ )
	{
		_var4 = _var4 + _var5;
		float2 _var8 = _var4;
		for ( int _var9 = 0; _var9 < 13; _var9++ )
		{
			float2 _var10 = In.vTexCoord_0;
			_var8 = _var8 + _var6;
			_var10 = _var10 + _var8;
			float4 _var11 = tex2D( _Sampler_00, _var10 ).rgba;
			_var11 = _var11 * g_cArray_27[_var9][_var7];
			_var0 = _var0 + _var11;
		}
	}
	Out.vColor_0 = _var0;
	return Out;
}