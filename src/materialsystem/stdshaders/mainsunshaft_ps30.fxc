#define HDRTYPE HDR_TYPE_NONE
#include "common_ps_fxc.h"

sampler FBSampler : register(s0);
sampler SunraysMask : register(s1);

struct PS_INPUT
{
    float2 texCoord : TEXCOORD0;
};

// Function to add noise to sampling coordinates
float2 AddNoise(float2 uv, float time)
{
    // Use sin and cos functions to create periodic noise
    float noiseX = sin(uv.y * 10.0 + time) * 0.01;
    float noiseY = cos(uv.x * 10.0 + time) * 0.01;
    return uv + float2(noiseX, noiseY);
}

// Function to calculate the distance from a point to the sun position
float DistanceToSun(float2 uv)
{
    // Define the position of the sun (you may need to adjust this based on your scene)
    float2 sunPosition = float2(0.5, 0.5); // Center of the screen
    
    // Calculate the distance from the current pixel to the sun position
    float2 delta = uv - sunPosition;
    return length(delta);
}

float4 main(PS_INPUT i) : COLOR
{
    // Sample the colors from the framebuffer texture and the sunrays mask
    float4 screenColor = tex2D(FBSampler, i.texCoord);
    float4 sunraysMaskColor = tex2D(SunraysMask, i.texCoord);

    // Calculate distance from the sun's position
    float distanceToSun = DistanceToSun(i.texCoord);

    // Adjust intensity based on distance from the sun (closer to sun = brighter)
    float intensity = saturate(1.0 - distanceToSun * 5.0);

    // Apply the sunrays effect using the mask and intensity
    float4 sunraysEffect = screenColor * sunraysMaskColor * intensity;

    // Combine the screen color with the sunrays effect
    float4 finalColor = screenColor + sunraysEffect;

    return finalColor;
}
